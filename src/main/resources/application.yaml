server:
  port: 8080

#自定义Redis的配置
msb:
  redis:
    ip: 127.0.0.1
    port: 6379
    password:
    database: 0

spring:
  cache:
    type: redis
  redis:
    host: ${msb.redis.ip}
    password: ${msb.redis.password}
    port: ${msb.redis.port}

j2cache:
  #打开spring缓存
  open-spring-cache: true
  #被动的模式清理缓存
  cache-clean-mode: passive
  #是否允许空值
  allow-null-values: true
  #指定redis客户端使用lettuce，也可以使用Jedis
  redis-client: lettuce
  #开启二级缓存，false则表示只使用一级缓存
  l2-cache-open: true
  # 事件通知的机制，j2cache从1.3.0版本开始支持JGroups和Redis Pub/Sub两种方式进行缓存事件的通知。
  # 此处我们使用基于redis的发布订阅模式来通知缓存的各个节点来进行缓存数据的同步（由j2cache进行实现，我们写上配置即可）
  broadcast: net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy
  # broadcast: jgroups
  #指定一级缓存提供者为caffeine
  L1:
    provider_class: caffeine
  #指定二级缓存提供者为redis
  L2:
    #指定类提供Redis的一些api操作
    provider_class: net.oschina.j2cache.cache.support.redis.SpringRedisProvider
    #Redis的连接方式
    config_section: lettuce
  #开启ttl同步到Redis
  sync_ttl_to_redis: true
  #
  default_cache_null_object: false
  serialization: fst
caffeine:
  properties: /caffeine.properties # 这个配置文件需要放在项目中
  # lettuce是redis的一个客户端，也可以使用jedis，都是用来操作redis的java客户端
lettuce:
  mode: single
  namespace:
  storage: generic
  channel: j2cache
  scheme: redis
  hosts: ${msb.redis.ip}:${msb.redis.port}
  password: ${msb.redis.password}
  database: ${msb.redis.database}
  sentinelMasterId:
  maxTotal: 100
  maxIdle: 10
  minIdle: 10
  timeout: 10000
